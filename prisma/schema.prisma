generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  collections   Collection[]
  sessions      Session[]
  userRoles     UserRole[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Collection {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  loci      Locus[]

  @@unique([ownerId, name], map: "owner_collection_unique")
}

model Item {
  id               String   @id @default(cuid())
  name             String
  description      String   @default("")
  amount           Int
  createdAt        DateTime @default(now()) @db.Timestamp(6)
  amountCheckedOut Int      @default(0)
  locusId          String
  locus            Locus    @relation(fields: [locusId], references: [id], onDelete: Cascade)

  @@unique([locusId, name], map: "locus_item_unique")
}

model Permission {
  id              String           @id @default(cuid())
  authority       String
  description     String?
  rolePermissions RolePermission[]
}

model Role {
  id              String           @id @default(cuid())
  name            String
  description     String?
  rolePermissions RolePermission[]
  userRoles       UserRole[]
}

model RolePermission {
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([roleId, permissionId], map: "role_permission_pkey")
}

model UserRole {
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId], map: "user_role_pkey")
}

model Locus {
  id           String     @id @default(cuid())
  name         String
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  items        Item[]

  @@unique([collectionId, name], map: "collection_locus_unique")
}
